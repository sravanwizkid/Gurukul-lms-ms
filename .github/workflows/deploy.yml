name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add concurrency to cancel running workflows
concurrency:
  group: "deploy"
  cancel-in-progress: true

env:
  PROJECT_ID: gurukul-lms-ms
  SERVICE_NAME: gurukul-sm-api
  REGION: asia-south1

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: glms1
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Run API Tests
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: glms1
          DB_USER: postgres
          DB_PASSWORD: postgres123
          API_BASE_URL: http://localhost:3000
        run: |
          node dist/backend/index.js &
          sleep 5  # Wait for server to start
          npm run test:ci

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker asia-south1-docker.pkg.dev

      - name: Build and Push Container
        run: docker build -t asia-south1-docker.pkg.dev/$PROJECT_ID/gurukul-repo/$SERVICE_NAME . && docker push asia-south1-docker.pkg.dev/$PROJECT_ID/gurukul-repo/$SERVICE_NAME

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
          --image asia-south1-docker.pkg.dev/$PROJECT_ID/gurukul-repo/$SERVICE_NAME \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --timeout=300s \
          --min-instances=0 \
          --max-instances=4

      - name: Setup Test Database
        run: |
          PGPASSWORD=postgres123 psql -h localhost -U postgres -d glms1 -c "
          -- Create tables if they don't exist
          CREATE TABLE IF NOT EXISTS students (
            sid SERIAL PRIMARY KEY,
            sname VARCHAR(255),
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL
          );

          -- Insert test user if not exists
          INSERT INTO students (sid, sname, email, password_hash) 
          VALUES (2, 'Test Student', 'test@example.com', 'test123')
          ON CONFLICT (email) DO NOTHING;
          "

      - name: Clean up
        if: always()
        run: echo "Cleaning up resources..."

  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Run Post-Deploy Tests
        env:
          API_BASE_URL: ${{ secrets.CLOUD_RUN_URL }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        run: npm test 